name: BackEnd - CI/CD

on:
  pull_request:
    # main branch, dev branch에 PR 생성 시 동작합니다.
    branches: ["main", "dev"]
  push:
    # dev branch에 push 시 동작합니다.
    branches: ["dev"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Git 저장소를 체크아웃합니다.
      - uses: actions/checkout@v3

      # JDK를 11 버전으로 설정합니다.
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Gradle 캐싱 설정으로 빌드 속도를 최적화합니다.
      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application.yml 및 관련 파일 생성
      - name: Make application.yml
        run: |
          cd ./src/main
          mkdir -p resources
          cd resources
          touch application.yml application-aws.yml application-oauth.yml application-app.yml
          echo "$APPLICATION_OAUTH" > application-oauth.yml
          echo "$APPLICATION_APP" > application-app.yml
          echo "$APPLICATION" > application.yml
          echo "$APPLICATION_AWS" > application-aws.yml
        env:
          APPLICATION_OAUTH: ${{ secrets.APPLICATION_OAUTH }}
          APPLICATION_APP: ${{ secrets.APPLICATION_APP }}
          APPLICATION: ${{ secrets.APPLICATION }}
          APPLICATION_AWS: ${{ secrets.APPLICATION_AWS }}
        shell: bash

      # Gradle 실행 파일에 실행 권한 부여
      - name: Gradle 권한 부여
        run: chmod +x gradlew

      # Gradle로 빌드 실행
      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar


