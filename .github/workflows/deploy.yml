name: BackEnd - CI/CD

on:
  push:
    branches: ["main"] # main 브랜치에 push(merge)될 경우 실행됩니다.
  pull_request:
    branches: ["main"] # main 브랜치에 대한 PR 생성 시 실행됩니다.

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Git 저장소를 체크아웃합니다.
      - uses: actions/checkout@v3

      # JDK를 17 버전으로 셋팅합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle을 캐싱하여 빌드 속도를 최적화합니다.
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 프로젝트 환경설정 파일 생성
      - name: Make application.yml
        run: |
          cd ./src/main
          mkdir -p resources
          cd ./resources
          touch ./application.yml ./application-aws.yml ./application-oauth.yml ./application-app.yml
          echo "$APPLICATION_OAUTH" > ./application-oauth.yml
          echo "$APPLICATION_APP" > ./application-app.yml
          echo "$APPLICATION" > ./application.yml
          echo "$APPLICATION_AWS" > ./application-aws.yml
        env:
          APPLICATION_OAUTH: ${{ secrets.APPLICATION_OAUTH }}
          APPLICATION_APP: ${{ secrets.APPLICATION_APP }}
          APPLICATION: ${{ secrets.APPLICATION }}
          APPLICATION_AWS: ${{ secrets.APPLICATION_AWS }}
        shell: bash

      # Gradle 실행 파일에 실행 권한 부여
      - name: Gradle 권한 부여
        run: chmod +x gradlew

      # Gradle로 빌드 실행
      - name: Build with Gradle
        run: ./gradlew bootJar

      # 배포 관련 파일 및 빌드 결과를 zip 파일로 압축
      - name: Package deployment files
        run: |
          mkdir deploy
          cp ./docker/docker-compose.blue.yml ./deploy/
          cp ./docker/docker-compose.green.yml ./deploy/
          cp ./appspec.yml ./deploy/
          cp ./docker/Dockerfile ./deploy/
          cp ./scripts/*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy

      # AWS 연결 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3에 프로젝트 업로드
      - name: Upload to S3
        run: |
          aws s3 cp ./spring-build.zip s3://backend-rex-bucket

      # CodeDeploy를 통해 배포 실행
      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name backend-deploy \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name backend-deploy-group \
            --s3-location bucket=backend-rex-bucket,bundleType=zip,key=spring-build.zip

